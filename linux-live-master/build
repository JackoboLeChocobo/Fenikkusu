#!/bin/bash
# Linux Live Kit version 7

export PATH=.:./tools:../tools:/usr/sbin:/usr/bin:/sbin:/bin:/

CHANGEDIR=$(dirname $(readlink -f $0))
echo "Changing current directory to $CHANGEDIR"
cd $CHANGEDIR
CWD="$(pwd)"

. ./config || exit 1
. ./livekitlib || exit 1

# only root can continue, because only root can read all files from your system
allow_only_root

# check for xz
if [ "$(xz --help 2>&1 | grep -i "Compress")" = "" ]; then
   echo "xz not found or cannot compress"
   echo "you may consider installing xz-tools package"
   exit 1
fi

# check for mksquashfs with xz compression
if [ "$(mksquashfs 2>&1 | grep "Xdict-size")" = "" ]; then
   echo "mksquashfs not found or doesn't support -comp xz, aborting, no changes made"
   echo "you may consider installing squashfs-tools package"
   exit 1
fi

MKISOFS=$(which mkisofs)
if [ "$MKISOFS" = "" ]; then
   MKISOFS=$(which genisoimage)
fi
if [ "$MKISOFS" = "" ]; then
   echo "Cannot find mkisofs or genisoimage, stop"
   exit 3
fi

# build initramfs image
if [ "$SKIPINITRFS" = "" ]; then
   echo "Building initramfs image..."
   cd initramfs
   INITRAMFS=$(./initramfs_create)
   cd ..
fi

# create live kit filesystem (cpio archive)
rm -Rf "$LIVEKITDATA"
BOOT="$LIVEKITDATA"/"$LIVEKITNAME"/boot
mkdir -p "$BOOT"
mkdir -p "$BOOT"/../changes
mkdir -p "$BOOT"/../modules

if [ "$INITRAMFS" != "" ]; then
   mv "$INITRAMFS" $BOOT/initrfs.img
fi

# BIOS / MBR booting
cp -r bootfiles/* $BOOT
cat bootfiles/syslinux.cfg | sed -r "s:/boot/:/$LIVEKITNAME/boot/:" > $BOOT/syslinux.cfg
cat bootfiles/bootinst.bat | sed -r "s:/boot/:/$LIVEKITNAME/boot/:" | sed -r "s:\\\\boot\\\\:\\\\$LIVEKITNAME\\\\boot\\\\:" > $BOOT/bootinst.bat
cp $VMLINUZ $BOOT/ || exit

# UEFI booting
mkdir -p $BOOT/EFI/Boot
cp bootfiles/EFI/Boot/syslinux.efi $BOOT/EFI/Boot/bootx64.efi
cp bootfiles/EFI/Boot/{ldlinux.e64,menu.c32,libutil.c32,vesamenu.c32,libcom32.c32} $BOOT/EFI/Boot
cat $BOOT/syslinux.cfg | sed -r "s:/$LIVEKITNAME/boot/vesamenu:vesamenu:" > $BOOT/EFI/Boot/syslinux.cfg

mksquashfs /bin 	$LIVEKITDATA/$LIVEKITNAME/modules/01-core-bin.$BEXT 	-comp xz -b 1024K -Xbcj x86 -always-use-fragments -keep-as-directory || exit
mksquashfs /etc 	$LIVEKITDATA/$LIVEKITNAME/modules/02-core-etc.$BEXT 	-comp xz -b 1024K -Xbcj x86 -always-use-fragments -keep-as-directory || exit
mksquashfs /home 	$LIVEKITDATA/$LIVEKITNAME/modules/03-core-home.$BEXT 	-comp xz -b 1024K -Xbcj x86 -always-use-fragments -keep-as-directory -e /home/jackobo -e /home/Fenikkusu || exit
mksquashfs /lib 	$LIVEKITDATA/$LIVEKITNAME/modules/04-core-lib.$BEXT 	-comp xz -b 1024K -Xbcj x86 -always-use-fragments -keep-as-directory || exit
mksquashfs /lib64 	$LIVEKITDATA/$LIVEKITNAME/modules/05-core-lib64.$BEXT 	-comp xz -b 1024K -Xbcj x86 -always-use-fragments -keep-as-directory || exit
#mksquashfs /libx32 	$LIVEKITDATA/$LIVEKITNAME/modules/06-core-libx32.$BEXT 	-comp xz -b 1024K -Xbcj x86 -always-use-fragments -keep-as-directory || exit
mksquashfs /opt 	$LIVEKITDATA/$LIVEKITNAME/modules/07-core-opt.$BEXT 	-comp xz -b 1024K -Xbcj x86 -always-use-fragments -keep-as-directory || exit
mksquashfs /root 	$LIVEKITDATA/$LIVEKITNAME/modules/08-core-root.$BEXT 	-comp xz -b 1024K -Xbcj x86 -always-use-fragments -keep-as-directory || exit
mksquashfs /sbin 	$LIVEKITDATA/$LIVEKITNAME/modules/09-core-sbin.$BEXT 	-comp xz -b 1024K -Xbcj x86 -always-use-fragments -keep-as-directory || exit
mksquashfs /srv 	$LIVEKITDATA/$LIVEKITNAME/modules/10-core-srv.$BEXT 	-comp xz -b 1024K -Xbcj x86 -always-use-fragments -keep-as-directory || exit
mksquashfs /usr 	$LIVEKITDATA/$LIVEKITNAME/modules/11-core-usr.$BEXT 	-comp xz -b 1024K -Xbcj x86 -always-use-fragments -keep-as-directory || exit
mksquashfs /var 	$LIVEKITDATA/$LIVEKITNAME/modules/12-core-var.$BEXT 	-comp xz -b 1024K -Xbcj x86 -always-use-fragments -keep-as-directory || exit


cd "$LIVEKITDATA"
ARCH=$(uname -m)
TARGET=/tmp

echo "-----------------------------"
echo "Finished. Find your result in $LIVEKITDATA"

cd $CWD
